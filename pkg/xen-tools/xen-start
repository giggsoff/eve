#!/bin/sh

UnknownStateThreshold=5

bail() {
   echo "$@"
   exit 1
}

domID() {
   # we may need to wait for domain to come online for us to manipulate it (timing out in under 30 sec)
   # shellcheck disable=SC2034
   for _ in 1 2 3; do
     ID=$(xl domid "$1")
     [ -z "$ID" ] || break # we should return immediately, ID may change over time
     sleep 8
   done >/dev/null 2>&1

   echo "$ID"
}

handleUnknownState() {
  # checking if we have unknownStateCounter, if not initializing it.
  unknownStateCounter="${unknownStateCounter:-0}"

  if [ "$unknownStateCounter" -ge "$UnknownStateThreshold" ]; then
    # Number of times we got unknown state is > UnknownStateThreshold, so declaring the state as broken
    echo broken
  else
    # Number of times we got unknown state is <= UnknownStateThreshold, so declaring the state as running
    echo running
  fi

  unknownStateCounter=$((unknownStateCounter + 1))
}

handleKnownState() {
  # resetting unknownStateCounter
  unknownStateCounter=0
  STATUS="$1"

  # an additional check we do for running domains is to make sure device model is still around
  if [ "$1" = running ] &&
     DM_PID=$(xenstore read "/local/domain/$ID/image/device-model-pid" 2>/dev/null) &&
     ! (readlink "/proc/$DM_PID/exe" | grep -q qemu-system-); then
     STATUS=broken
  fi

  echo "$STATUS"
}

xen_info() {
   # In case of reboot from inside the domain we will have new ID and we need to defer wait for coming back
   # also we set - if ID is empty to defer wait for it and go to default case below
   if [ "$PREVIOUS_ID" != "${1:--}" ]; then handleUnknownState; else
     # we expect to get rbpscd where every letter can also be a dash (-)
     # Name    ID    Mem    VCPUs    State    Time(s)
     case $(xl list "${1:--}" 2>/dev/null | awk '{st=$5;} END {print st;}') in
        *c*) handleKnownState broken  ;;
         *d) handleKnownState halting ;;
        *s*) handleKnownState halting ;;
        *p*) handleKnownState paused  ;;
        *b*) handleKnownState running ;;
         r*) handleKnownState running ;;
       # Defer checking domain status again in order to recover from unknown state
     ------) handleUnknownState ;;
          *) handleKnownState broken ;;
     esac
   fi
   PREVIOUS_ID="${1:--}"
}

# pre-flight checks
[ $# -ne 2 ] && bail "Usage: $0 <domain name> <domain config>"

# declare the status as running
mkdir -p /run/tasks >/dev/null 2>&1
echo running > "/run/tasks/$1"

# FIXME: this really needs to be managed by runc
keyctl link @u @s

# if HVM capabilities exist, we run PV guests as PVH
if grep -q 'type.*=.*"pv"' "$2"; then
   # shellcheck disable=SC2089
   xl info | grep -q 'virt_caps.*hvm' && EXTRA_ARGS='type="pvh"'
fi

# create domain in a paused state
# shellcheck disable=SC2090
xl create "$2" -p $EXTRA_ARGS || bail "xl created failed"

# we may need to wait for domain to come online for us to manipulate it (timing out in under 30 sec)
ID=$(domID "$1")
PREVIOUS_ID=$ID

# finally unpause the domain
xl unpause "$ID" || bail "xl unpause failed"

# now start polling for domain status in the background
# (note: our use of mv to make sure file reads on the other side are atomic)
(while true; do
   xen_info "$(domID "$1")" > "/run/tasks/$1.tmp"
   mv "/run/tasks/$1.tmp" "/run/tasks/$1"
   sleep 5
done) &

# and start watching over the console: note that we loop forever
# in anticipation of potential domain reboots - we rely on xen_info
# to declare domain broken if it can't be found for a long time
while true; do
   xl console "$1" < /dev/null
   sleep 5
done
